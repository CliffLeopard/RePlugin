def static replaceVariables(File file, String key, String value) {
    if (!file.exists()) return
    // 正则匹配:(?<=VER\s*=\s*\")\S*(?=\")
    def regex = "(?<=${key}\\s{0,5}=\\s{0,5}\\\")\\S*(?=\\\")"
    file.write((file.text =~ /${regex}/).replaceAll(value))
}

def pbUpdateVariables() {
    [
            "src/main/kotlin/com/qihoo360/replugin/Constants.kt"
    ].forEach {
        replaceVariables(project.file(it), "VER", RP_VERSION)
    }
}
pbUpdateVariables()
java {
    withJavadocJar()
    withSourcesJar()
}

def getLocalProperties() {
    Properties localProperties = new Properties()
    InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream();
    localProperties.load(inputStream)
    return localProperties
}

def getReleaseRepositoryUrl() {
    Properties localProperties = getLocalProperties()
    return localProperties.containsKey('RELEASE_REPOSITORY_URL') ? localProperties.get("RELEASE_REPOSITORY_URL") : ""
}

def getSnapshotRepositoryUrl() {
    Properties localProperties = getLocalProperties()
    return localProperties.containsKey('SNAPSHOT_REPOSITORY_URL') ? localProperties.get("SNAPSHOT_REPOSITORY_URL") : ""
}

def getRepositoryUsername() {
    Properties localProperties = getLocalProperties()
    return localProperties.containsKey('SONATYPE_NEXUS_USERNAME') ? localProperties.get("SONATYPE_NEXUS_USERNAME") : ""
}

def getRepositoryPassword() {
    Properties localProperties = getLocalProperties()
    return localProperties.containsKey('SONATYPE_NEXUS_PASSWORD') ? localProperties.get("SONATYPE_NEXUS_PASSWORD") : ""
}

publishing {
    publications {
        release(MavenPublication) {
            from(components['java'])
            groupId = rootProject.ext['RP_GROUP']
            artifactId = project.name
            version = rootProject.ext['RP_VERSION']
        }
    }
    repositories {
        maven {
            url getSnapshotRepositoryUrl()
            credentials {
                username getRepositoryUsername()
                password getRepositoryPassword()
            }
        }
    }
}

//signing {
//    sign publishing.publications.release
//}


javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

group = rootProject.ext.RP_GROUP
version = rootProject.ext.RP_VERSION

pluginBundle {
    website = rootProject.ext.RP_SITE
    vcsUrl = rootProject.ext.RP_GIT_URL
    tags = ['Android', 'plugin', 'pluggable', '360']
}

