plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    compileSdkVersion RP_CompileSdkVersion
    buildToolsVersion RP_BuildToolsVersion

    defaultConfig {
        applicationId       "com.cleo.sample.plugin"
        minSdkVersion       RP_MinSdkVersion
        targetSdkVersion    RP_TargetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

apply plugin: 'replugin-plugin-gradle'

repluginPluginConfig {
    pluginName = "sample-plugin"
    hostApplicationId = "com.cleo.sample_host"
    hostAppLauncherActivity = "com.cleo.sample_host.MainActivity"
    excludedClasses {
        exclude1 {
            classNameRegex = [
                    "com/cleo/sample/plugin/util/SimplePluginUtil"
            ]
            fromJar = true
            scope = 0x04
        }
    }
    hookMethods {
        callBefore {
            className  = "com/cleo/sample/plugin/hook/Origin"
            methodName = "callF"
            methodDesc = "(Lcom/cleo/sample/plugin/hook/A;Lcom/cleo/sample/plugin/hook/B;)Lcom/cleo/sample/plugin/hook/Res;"
            targetClassName  = "com/cleo/sample/plugin/hook/Target"
            targetMethodName = "callBeforeF"
            targetMethodDesc = "(Lcom/qihoo360/replugin/base/hook/MethodInfo;Ljava/lang/Object;Lcom/cleo/sample/plugin/hook/A;Lcom/cleo/sample/plugin/hook/B;)V"
            hookType = 0x07
        }

        callBeforeVoid {
            className  = "com/cleo/sample/plugin/hook/Origin"
            methodName = "callVoidF"
            methodDesc = "(Lcom/cleo/sample/plugin/hook/A;Lcom/cleo/sample/plugin/hook/B;)V"
            targetClassName  = "com/cleo/sample/plugin/hook/Target"
            targetMethodName = "callBeforeF"
            targetMethodDesc = "(Lcom/qihoo360/replugin/base/hook/MethodInfo;Ljava/lang/Object;Lcom/cleo/sample/plugin/hook/A;Lcom/cleo/sample/plugin/hook/B;)V"
            hookType = 0x07
        }

        callBeforeStatic {
            className  = "com/cleo/sample/plugin/hook/Origin"
            methodName = "callStaticF"
            methodDesc = "(Lcom/cleo/sample/plugin/hook/A;Lcom/cleo/sample/plugin/hook/B;)Lcom/cleo/sample/plugin/hook/Res;"
            targetClassName  = "com/cleo/sample/plugin/hook/Target"
            targetMethodName = "callBeforeStaticF"
            targetMethodDesc = "(Lcom/qihoo360/replugin/base/hook/MethodInfo;Lcom/cleo/sample/plugin/hook/A;Lcom/cleo/sample/plugin/hook/B;)V"
            hookType = 0x0a
        }

        callBeforeStaticVoid {
            className  = "com/cleo/sample/plugin/hook/Origin"
            methodName = "callVoidStaticF"
            methodDesc = "(Lcom/cleo/sample/plugin/hook/A;Lcom/cleo/sample/plugin/hook/B;)V"
            targetClassName  = "com/cleo/sample/plugin/hook/Target"
            targetMethodName = "callBeforeStaticF"
            targetMethodDesc = "(Lcom/qihoo360/replugin/base/hook/MethodInfo;Lcom/cleo/sample/plugin/hook/A;Lcom/cleo/sample/plugin/hook/B;)V"
            hookType = 0x0a
        }

    }
}

dependencies {
    implementation project(':replugin-lib-plugin')
    implementation project(':sample:sample-plugin-util')
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$KOTLIN_VERSION"
    implementation "androidx.core:core-ktx:$ANDROIDX_CORE_KTX"
    implementation "androidx.appcompat:appcompat:$ANDROIDX_APPCOMPAT"
    implementation "com.google.android.material:material:$GOOGLE_MATERIAL"
    implementation "androidx.constraintlayout:constraintlayout:$ANDROIDX_CONSTRAIN"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$LIVEDATA_KTX"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$LIVEDATA_KTX"
    testImplementation "junit:junit:$JUNIT_VERSION"
    androidTestImplementation "androidx.test.ext:junit:$ANDROIDX_JUNIT"
    androidTestImplementation "androidx.test.espresso:espresso-core:$ANDROIDX_ESPRESSO"
}