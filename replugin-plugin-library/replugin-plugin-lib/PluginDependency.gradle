
def applyPluginDependencies(Object... dependencies) {
    def variants
    def isLibrary = false
    if (project.getPlugins().hasPlugin('com.android.application')) {
        variants = project.android.applicationVariants
    } else if (project.getPlugins().hasPlugin('com.android.library')) {
        variants = project.android.libraryVariants
        isLibrary = true
    } else {
        System.err.println("$project : is not application project")
        return
    }

    def pluginAppIds = []
    def pluginJars = []
    def pluginApks = []
    def pluginJarTasks = []

    dependencies.each { d ->
        def proj = project.project(d)
        proj.evaluate() //必须evaluate一次

        pluginAppIds.add(proj.android.defaultConfig.applicationId)
        //println("${pluginAppIds.last()}")

        pluginJarTasks.add(proj.assembleRelease)
        //println("${pluginJarTasks.last()}")
        pluginJars.add(new File(proj.buildDir, 'libs/classes.jar'))
        //println("${pluginJars.last()}")

        def projVariant = proj.android.applicationVariants
        def projPackageTasks = projVariant.variantData.taskContainer.packageAndroidTask
        def pluginApkAdded = false
        for (t in projPackageTasks) {
            if (t.name.endsWith("Release")) {
                pluginApks.add(new File(t.get().getOutputDirectory(), t.get().getApkNames()[0]).path)
                pluginApkAdded = true
                break
            }
        }
        if (!pluginApkAdded) {
            pluginApks.add(new File(projPackageTasks.get(0).get().getOutputDirectory(), t.get().getApkNames()[0]).path)
        }
        //println("${pluginApks.last()}")
    }

    for (jar in pluginJars) {
        project.getDependencies().add('compileOnly', project.files(jar))
    }

//    if (!isLibrary) {
//        Task copApkTask = project.tasks.create(name: "copyPlguinApks", type: Copy) {
//            from pluginApks
//            into "${project.android.sourceSets.main.assets.srcDirs[0]}/plugins/"
//            rename { String filename ->
//                println("$filename")
//                for (int i = 0; i < pluginAppIds.size(); i++) {
//                    if (pluginApks[i].endsWith(filename)) {
//                        return pluginAppIds[i] + ".apk"
//                    }
//                }
//                return filename
//            }
//        }
//        variants.all { variant ->
//            def taskContainer = variant.variantData.getScope().getTaskContainer()
//            def preBuildTask = taskContainer.getPreBuildTask().get()
//            preBuildTask.dependsOn pluginJarTasks
//            taskContainer.assetGenTask.get().dependsOn copApkTask
//        }
//    } else {
//        variants.all { variant ->
//            def taskContainer = variant.variantData.getScope().getTaskContainer()
//            def preBuildTask = taskContainer.getPreBuildTask().get()
//            preBuildTask.dependsOn pluginJarTasks
//        }
//    }
    variants.all { variant ->
        def taskContainer = variant.variantData.getScope().getTaskContainer()
        def preBuildTask = taskContainer.getPreBuildTask().get()
        preBuildTask.dependsOn pluginJarTasks
    }
}

project.ext {
    applyPluginDependencies = this.&applyPluginDependencies
}